{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "eslint-disable max-len",
      "summary": "",
      "path": "js-max-number-error.js",
      "properties": [
        {
          "name": "expectedNumber",
          "type": "string | null | undefined",
          "description": "A number that is expected to be true.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"[unknown]\""
        }
      ],
      "methods": [
        {
          "name": "toggle",
          "description": "Toggles the collapse element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "JsMaxNumberError",
      "attributes": [
        {
          "name": "expected-number",
          "description": "A number that is expected to be true.",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "js-max-number-error"
    },
    {
      "description": "`<json-viewer>` A JSON payload viewer for the JSON response.\n\nThis element uses a web worker to process the JSON data.\nTo simplify our lives and app build process the worker script is embeded in the\nimported template body. It will extract worker data from it and create the\nworker. Otherwise build process would need to incude a worker script file\ninto set path which is not very programmer friendly.\n\n### Example\n\n```html\n<json-viewer json='{\"json\": \"test\"}'></json-viewer>\n```\n\n## Custom search\n\nIf the platform doesn't support native text search, this element implements\n`ArcBehaviors.TextSearchBehavior` and exposes the `query` attribute.\nSet any text to the `query` attribute and it will automatically highlight\noccurance of the text.\nSee demo for example.\n\n## Big numbers in JavaScript\n\nThis element marks all numbers that are above `Number.MAX_SAFE_INTEGER` value\nand locates the numeric value in source json if passed json was a string or\nwhen `raw` attribute was set. In this case it will display a warning and\nexplanation about use of big numbers in JavaScript.\nSee js-max-number-error element documentation for more information.\n\n## Content actions\n\nThe element can render a actions pane above the code view. Action pane is to\ndisplay content actions that is relevan in context of the response displayed\nbelow the icon buttons. It should be icon buttons or just buttons added to this\nview.\n\n```html\n<json-viewer json='{\"json\": \"test\"}'>\n <paper-icon-button slot=\"content-action\"\n   title=\"Copy content to clipboard\" icon=\"arc:content-copy\"></paper-icon-button>\n</json-viewer>\n```\n\n### Styling\n\n`<json-viewer>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--json-viewer` | Mixin applied to the element | `{}`\n`--code-type-null-value-color` | Color of the null value. | `#708`\n`--code-type-boolean-value-color` | Color of the boolean value | `#708`\n`--code-punctuation-value-color` | Punctuation color. | `black`\n`--code-type-number-value-color` | Color of the numeric value | `blue`\n`--code-type-text-value-color` | Color of the string value. | `#48A`\n`--code-array-index-color` | Color of the array counter. | `rgb(119, 119, 119)`\n`--code-type-link-color` | Color of link inserted into the viewer. | `#1976d2`\n`--json-viewer-node` | Mixin applied to a \"node\" | `{}`\n`--code-dimmed-punctuation-opacity` | Value of the opacity on the \"dimmed\" punctuation | `0.34`\n`--code-background-color` | Background color of the code area | ``",
      "summary": "",
      "path": "json-viewer.js",
      "properties": [
        {
          "name": "json",
          "type": "string | null | undefined",
          "description": "JSON data to parse and display.\nIt can be either JS object (already parsed string) or string value.\nIf the passed object is a string then JSON.parse function will be\nused to parse string.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_changed\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "raw",
          "type": "string | null | undefined",
          "description": "If it's possible, set this property to the JSON string.\nIt will help to handle big numbers that are not parsed correctly by\nthe JSON.parse function. The parser will try to locate the number\nin the source string and display it in the correct form.\n\nP.S.\nCalling JSON.stringify on a JS won't help here :) Must be source\nstring.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isError",
          "type": "boolean | null | undefined",
          "description": "True if error ocurred when parsing the `json` data.\nAn error message will be displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "working",
          "type": "boolean | null | undefined",
          "description": "True when JSON is beeing parsed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showOutput",
          "type": "boolean | null | undefined",
          "description": "True when output should be shown (JSON has been parsed without errors)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 6
            },
            "end": {
              "line": 305,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 2
            },
            "end": {
              "line": 315,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearOutput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 2
            },
            "end": {
              "line": 320,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_writeOutput",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_changed",
          "description": "Called when `json` property changed. It starts parsing the data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 2
            },
            "end": {
              "line": 360,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "json"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_printPrimitiveValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 2
            },
            "end": {
              "line": 366,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "klas"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportResult",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 368,
              "column": 2
            },
            "end": {
              "line": 373,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "html"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportError",
          "description": "Called when workr error received.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 2
            },
            "end": {
              "line": 382,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cause"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeShowOutput",
          "description": "Compute if output should be shown.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 2
            },
            "end": {
              "line": 392,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "working"
            },
            {
              "name": "isError"
            },
            {
              "name": "json"
            }
          ]
        },
        {
          "name": "_handleDisplayClick",
          "description": "Called when the user click on the display area. It will handle view toggle and links clicks.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 2
            },
            "end": {
              "line": 426,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatchChangeUrl",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 2
            },
            "end": {
              "line": 437,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatchNewRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 439,
              "column": 2
            },
            "end": {
              "line": 449,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeActionsPanelClass",
          "description": "Computes CSS class for the actions pane.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 2
            },
            "end": {
              "line": 463,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "showOutput",
              "type": "Boolean",
              "description": "The `showOutput` propety value of the element."
            }
          ],
          "return": {
            "type": "String",
            "desc": "CSS class names for the panel depending on state of the\n`showOutput`property."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 85,
          "column": 0
        },
        "end": {
          "line": 476,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "JsonViewer",
      "attributes": [
        {
          "name": "json",
          "description": "JSON data to parse and display.\nIt can be either JS object (already parsed string) or string value.\nIf the passed object is a string then JSON.parse function will be\nused to parse string.",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "raw",
          "description": "If it's possible, set this property to the JSON string.\nIt will help to handle big numbers that are not parsed correctly by\nthe JSON.parse function. The parser will try to locate the number\nin the source string and display it in the correct form.\n\nP.S.\nCalling JSON.stringify on a JS won't help here :) Must be source\nstring.",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 6
            },
            "end": {
              "line": 278,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-error",
          "description": "True if error ocurred when parsing the `json` data.\nAn error message will be displayed.",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 6
            },
            "end": {
              "line": 288,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "working",
          "description": "True when JSON is beeing parsed.",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-output",
          "description": "True when output should be shown (JSON has been parsed without errors)",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 6
            },
            "end": {
              "line": 305,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "json-viewer-parsed",
          "description": "Fired when web worker finished work and the data are displayed.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "url-change-action",
          "description": "Event called when the user click on the anchor in display area.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "is-error-changed",
          "description": "Fired when the `isError` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "working-changed",
          "description": "Fired when the `working` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "json-viewer"
    }
  ],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "json-parser.js",
      "properties": [],
      "methods": [
        {
          "name": "_setJson",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "jsonData"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getHTML",
          "description": "Get created HTML content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 2
            },
            "end": {
              "line": 61,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "parse",
          "description": "Parse JSON data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 2
            },
            "end": {
              "line": 88,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data",
              "type": "*"
            },
            {
              "name": "opts",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Stirng"
          }
        },
        {
          "name": "parseNullValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "parseNumericValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 2
            },
            "end": {
              "line": 130,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "number"
            }
          ]
        },
        {
          "name": "parseBooleanValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 2
            },
            "end": {
              "line": 142,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bool"
            }
          ]
        },
        {
          "name": "parseStringValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ]
        },
        {
          "name": "parseObject",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "object"
            }
          ]
        },
        {
          "name": "parseArray",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array"
            }
          ]
        },
        {
          "name": "parseKey",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 2
            },
            "end": {
              "line": 234,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 26,
          "column": 7
        },
        "end": {
          "line": 235,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "JsonParser"
    }
  ]
}
